"""GP121-Grand Projet Informatique-Semestre 2"""

#Import:

from pandas import *

#Dataframe:

df_clients  = read_json("./data/clients.json") #On lit le contenu de la dataframe
df_vehicules  = read_json("./data/vehicules.json")
df_tarifs = read_json("./data/tarifs.json")

#Exemple utilisation de mask:
    
mask = df_clients["age"] > 25 #Le mask nous prend que ce que l'on veut voir, donc ici, les personnes avec des âges > 25ans
d = df_clients[mask]

#Exercices:

""" Location de voiture par un (nouveau) client """

def louer(dfc,dfv,data):
    #On vérifie si le client existe
    mask=dfc["num_permis"]==data["np"]
    if dfc[mask].empty: #Si le client n'existe pas encore
        dfc.loc[dfc.shape[0]]=[data["nom"],data["prenom"],data["age"],data["np"],data["id"],data["prix"]]
    else: #Si le client existe
        dfc.loc[mask, ["age", "prix_location", "id_vehicule"]] = [data["age"], data["prix"], data["id"]]
    mask=dfv["id"]==data["id"]
    dfv.loc[mask,["date_debut","date_fin"]]=[data["dd"],data["df"]]

#dico={"nom":"HHHH","prenom":"J","age":30,"np":101,"id":2,"prix":1000,"dd":"12-05-2021","df":"13-05-2021"} # On définit un dictionnaire où on va demander les infos que l'on veut au client
#louer(df_clients,df_vehicules,dico)



"""Afficher la grille tarifaire"""

def grille_tarifaire(dft):
    return dft.to_string(index=False)


"""Terminer une location"""

def km_ok(id,dfv,km):
    mask=dfv["id"]==id
    return dfv[mask].iloc[0]["kilometrage"] < km #Si le kilometrage ancien < nouveau kilometrage, c'est VRAI/ Sinon c'est FAUX, car l'ancien kilometrage ne peut pas être > au nouveau

def terminer_location(dfv,dfc,id,nv_km):
   #Acceder au vehicule d'identifiant id
   mask = dfv["id"]==id
   #Mettre a jour les date début et date fin ainsi que le nouveau km du vehicule
   dfv.loc[mask,["date_debut","date_fin","kilometrage"]]==["","",nv_km]
   #Acceder au donnees clients
   mask=dfc["id_vehicules"]==id
   #Mettre a jour id_vehicules du client et prix
   dfc.loc[mask,["id_vehicules","prix_location"]]==[-1,0]



"""Annuler une location"""

def sup_location(dfv,id,dfc):
    #Acceder au vehicule d'identifiant id
    mask=dfv["id"]==id
    #Mettre a jour les date début et date fin ainsi que le nouveau km du vehicule
    dfv.loc[mask,["date_debut","date_fin"]]==["",""]
    #Acceder au donnees clients
    mask=dfc["id_vehicules"]==id
    #Mettre a jour id_vehicules du client et prix
    dfc.loc[mask,["id_vehicules","prix_location"]]==[-1,0]

"""afficher les vehicules disponibles """

def vehicules_dispo(dfv):
    mask = df_vehicules["date_debut"] == "" #Comme y'a pas de date de début, donc la voiture n'a pas encore été loué
    df_clean=dfv[mask].drop(columns=["date_debut","date_fin"])#drop enlever date debut et date fin car inutile
    return df_clean.to_string(index=False)


"""afficher les vehicules indisponibles """

def vehicules_indispo(dfv):
    mask = df_vehicules["date_debut"] != "" #Comme y'a pas de date de début, donc la voiture n'a pas encore été loué
    df_clean=dfv[mask].drop(columns=["date_debut","date_fin"])#drop enlever date debut et date fin car inutile
    return df_clean.to_string(index=False)



"""Renvoyer le tarif d'un véhicule"""

def afficher_tarifs(dft,dfv,id):
    mask=dfv["id"]==id
    df_join=dfv[mask].merge(dft,how='inner', on=['gamme','type'])#merge va fusionner 2 DataFrame, ici, il fusionne les dataframes et ne prend pas en compte les doublons, donc "gamme" et "type"
    prix, assurance, caution = df_join.iloc[0]["prix"], df_join.iloc[0]["assurance"],df_join.iloc[0]["caution"]
    return(prix,assurance,caution)
 
"""Modifier le parc automobile"""

def ajouter_vehicules(dfv, data):
    dfv.loc[dfv.shape[0]] = [dfv.iloc[-1]["id"]+1, data["type"], data["marque"], data["modele"], data["carburant"], data["gamme"], data["km"], "", ""]

#dico4={"id":41,"type":"ZI","marque":"MERCEGREC","modele":"fiat 500","carburant":"eric zemmour","gamme":"DBZ","km":999,"date_debut":"","date_fin":""} # On définit un dictionnaire où on va demander les infos que l'on veut au client

ajouter_vehicules(df_vehicules,dico4)

def retirer_vehicules(dfv,id):
    df_del=dfv.drop(id-1)
    return df_del.to_string(index=False)









